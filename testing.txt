======================================================================
                     ROGUELIKE 星际射击游戏 - 测试文档
======================================================================

项目名称: Puppy HWk And His Four Dom Masters - 星际射击
版本: 2.0
开发语言: Rust
图形库: macroquad
文档类型: 测试计划和用例文档

======================================================================
1. 测试总体规划
======================================================================

1.1 测试目标
- 确保游戏功能的完整性和正确性
- 验证性能要求达标（60FPS，内存占用<100MB）
- 确保用户体验流畅和直观
- 验证所有游戏状态转换正常
- 确保平衡性设计合理

1.2 测试范围
- 功能测试：所有游戏功能模块
- 性能测试：帧率、内存、响应时间
- 兼容性测试：Windows 10/11 平台
- 用户体验测试：操作流畅性、界面友好性
- 压力测试：长时间运行稳定性

1.3 测试环境
- 操作系统：Windows 10/11
- 开发环境：Rust 1.70+, Cargo
- 硬件要求：最低配置电脑
- 测试工具：内置单元测试、手动测试

1.4 测试方法
- 单元测试（Unit Testing）：针对核心函数和数据结构
- 集成测试（Integration Testing）：模块间交互测试
- 系统测试（System Testing）：整体游戏流程测试
- 用户接受测试（User Acceptance Testing）：最终用户体验测试

======================================================================
2. 单元测试用例
======================================================================

2.1 基础数据结构测试

测试用例 TC001: Vec2 向量操作测试
```rust
#[test]
fn test_vec2_operations() {
    // 测试向量创建
    let vec1 = Vec2::new(3.0, 4.0);
    assert_eq!(vec1.x, 3.0);
    assert_eq!(vec1.y, 4.0);
    
    // 测试距离计算
    let vec2 = Vec2::new(0.0, 0.0);
    assert_eq!(vec1.distance(&vec2), 5.0);
    
    // 测试向量归一化
    let normalized = vec1.normalize();
    let length = (normalized.x.powi(2) + normalized.y.powi(2)).sqrt();
    assert!((length - 1.0).abs() < 0.001);
}
```

预期结果：所有断言通过
测试状态：通过 ✓

测试用例 TC002: 玩家创建和基础属性测试
```rust
#[test]
fn test_player_creation() {
    let player = Player::new();
    
    // 验证初始属性
    assert_eq!(player.health, 20);
    assert_eq!(player.max_health, 20);
    assert_eq!(player.level, 1);
    assert_eq!(player.experience, 0);
    assert_eq!(player.experience_needed, 100);
    assert_eq!(player.position.x, 400.0);
    assert_eq!(player.position.y, 550.0);
    
    // 验证武器初始状态
    assert_eq!(player.weapon.weapon_type, WeaponType::MachineGun);
    assert_eq!(player.weapon.attack_power, 2);
}
```

预期结果：玩家初始状态正确
测试状态：通过 ✓

测试用例 TC003: 武器强化系统测试
```rust
#[test]
fn test_weapon_enhancement() {
    let mut weapon = Weapon::new(WeaponType::MachineGun);
    
    // 测试基础攻击力
    assert_eq!(weapon.get_total_attack_power(), 2);
    
    // 测试强化后攻击力
    weapon.enhancement_level = 5;
    assert_eq!(weapon.get_total_attack_power(), 7);
    
    // 测试不同武器类型
    let laser = Weapon::new(WeaponType::Laser);
    assert_eq!(laser.attack_power, 4);
    assert_eq!(laser.bullet_count, 1);
    
    let shotgun = Weapon::new(WeaponType::Shotgun);
    assert_eq!(shotgun.attack_power, 4);
    assert_eq!(shotgun.bullet_count, 3);
}
```

预期结果：武器属性计算正确
测试状态：通过 ✓

测试用例 TC004: 敌人伤害系统测试
```rust
#[test]
fn test_enemy_damage() {
    let mut enemy = Enemy::new(EnemyType::Scout, Vec2::new(100.0, 100.0));
    
    // 验证初始血量
    assert_eq!(enemy.health, 20);
    assert_eq!(enemy.max_health, 20);
    
    // 测试承受伤害
    enemy.take_damage(10);
    assert_eq!(enemy.health, 10);
    
    // 测试致命伤害
    enemy.take_damage(15);
    assert_eq!(enemy.health, 0);
    
    // 测试奖励计算
    assert_eq!(enemy.get_drop_gold(), 10);
    assert_eq!(enemy.get_drop_exp(), 20);
}
```

预期结果：敌人伤害系统正常工作
测试状态：通过 ✓

测试用例 TC005: 等级提升系统测试
```rust
#[test]
fn test_level_up() {
    let mut player = Player::new();
    
    // 测试经验增加
    player.add_experience(50);
    assert_eq!(player.experience, 50);
    assert_eq!(player.level, 1);
    
    // 测试等级提升
    player.add_experience(50);
    assert_eq!(player.experience, 0);
    assert_eq!(player.level, 2);
    assert_eq!(player.experience_needed, 200);
    
    // 测试连续等级提升
    player.add_experience(400);
    assert_eq!(player.level, 4);
}
```

预期结果：等级系统计算正确
测试状态：通过 ✓

2.2 游戏逻辑测试

测试用例 TC006: 子弹创建和属性测试
```rust
#[test]
fn test_bullet_creation() {
    let position = Vec2::new(100.0, 200.0);
    let velocity = Vec2::new(0.0, -5.0);
    let bullet = Bullet::new(
        position, 
        velocity, 
        10, 
        true, 
        BulletType::PlayerMachineGun
    );
    
    assert_eq!(bullet.damage, 10);
    assert_eq!(bullet.is_player_bullet, true);
    assert_eq!(bullet.position.x, 100.0);
    assert_eq!(bullet.position.y, 200.0);
    assert_eq!(bullet.piercing_count, 0);
    assert_eq!(bullet.ricochet_count, 0);
}
```

预期结果：子弹创建正确
测试状态：通过 ✓

测试用例 TC007: 肉鸽升级系统测试
```rust
#[test]
fn test_rogue_upgrade() {
    let upgrade = RogueUpgrade::new(
        0,
        "Life-Enhancing",
        "HP+3",
        "Grants +3 Maximum HP",
        "♥",
        UpgradeRarity::Common,
        None
    );
    
    assert_eq!(upgrade.id, 0);
    assert_eq!(upgrade.name, "Life-Enhancing");
    assert_eq!(upgrade.rarity, UpgradeRarity::Common);
    assert_eq!(upgrade.current_selections, 0);
    
    // 测试稀有度颜色
    let color = upgrade.get_rarity_color();
    assert_eq!(color, WHITE);
}
```

预期结果：升级系统数据正确
测试状态：通过 ✓

======================================================================
3. 集成测试用例
======================================================================

3.1 战斗系统集成测试

测试用例 TC101: 玩家射击与敌人交互测试
测试步骤：
1. 创建游戏实例
2. 创建玩家和敌人
3. 执行玩家射击
4. 验证子弹创建
5. 模拟碰撞检测
6. 验证敌人受伤
7. 验证经验和金币奖励

预期结果：完整的射击-碰撞-奖励流程正常
测试状态：正常

测试用例 TC102: 肉鸽升级应用测试
测试步骤：
1. 创建玩家实例
2. 选择"火力增加"升级
3. 验证攻击力提升
4. 选择"多重射击"升级
5. 验证子弹数量增加
6. 测试射击效果变化

预期结果：升级效果正确应用
测试状态：正常

测试用例 TC103: 敌人AI行为测试
测试步骤：
1. 生成不同类型敌人
2. 验证移动模式差异
3. 测试攻击模式触发
4. 验证碰撞检测
5. 测试Boss阶段转换

预期结果：敌人行为符合设计
测试状态：正常

3.2 状态管理集成测试

测试用例 TC104: 游戏状态转换测试
测试步骤：
1. 验证MainMenu -> WeaponSelect转换
2. 验证WeaponSelect -> Battle转换
3. 验证Battle -> RogueSelection转换
4. 验证RogueSelection -> Battle转换
5. 验证Battle -> GameOver转换
6. 验证Login系统状态转换

预期结果：所有状态转换正常
测试状态：正常

测试用例 TC105: 数据持久性测试
测试步骤：
1. 进入战斗状态
2. 获得金币和经验
3. 选择升级
4. 验证数据保持
5. 游戏结束后验证统计

预期结果：数据在状态间正确保持
测试状态：正常

======================================================================
4. 系统测试用例
======================================================================

4.1 完整游戏流程测试

测试用例 TC201: 完整游戏胜利流程
测试步骤：
1. 启动游戏进入主菜单
2. 选择武器开始游戏
3. 战斗3分钟击败所有敌人
4. 多次升级选择
5. 击败最终Boss
6. 查看胜利结算

预期结果：完整胜利流程无误

测试用例 TC202: 完整游戏失败流程
测试步骤：
1. 启动游戏进入主菜单
2. 选择武器开始游戏
3. 故意承受伤害直至死亡
4. 查看失败结算
5. 重新开始游戏

预期结果：失败流程和重启正常

测试用例 TC203: 用户登录系统测试
测试步骤：
1. 进入登录界面
2. 输入错误账号密码
3. 验证登录失败提示
4. 输入正确账号密码（admin/123456）
5. 验证登录成功
6. 确认登录状态显示

预期结果：登录系统工作正常

4.2 边界条件测试

测试用例 TC204: 极限性能测试
测试步骤：
1. 同时生成大量敌人（50+）
2. 同时发射大量子弹（100+）
3. 观察帧率变化
4. 监控内存使用
5. 测试碰撞检测性能

预期结果：性能保持在可接受范围

测试用例 TC205: 边界输入测试
测试步骤：
1. 测试玩家移动到屏幕边界
2. 测试超长用户名输入
3. 测试连续快速按键
4. 测试同时按多个按键
5. 测试特殊字符输入

预期结果：边界条件处理正确

======================================================================
5. 性能测试用例
======================================================================

5.1 帧率性能测试

测试用例 TC301: 目标帧率测试
测试目标：验证游戏能够稳定运行在60FPS
测试环境：标准配置电脑
测试步骤：
1. 启动帧率监控工具
2. 进行10分钟战斗测试
3. 记录平均帧率
4. 记录最低帧率
5. 验证帧率波动范围

验收标准：
- 平均帧率 ≥ 55 FPS
- 最低帧率 ≥ 30 FPS
- 帧率波动 < 20%

测试用例 TC302: 内存使用测试
测试目标：验证内存使用在合理范围
测试步骤：
1. 监控游戏启动时内存使用
2. 进行30分钟连续游戏
3. 记录内存峰值
4. 检查是否存在内存泄漏
5. 验证游戏结束后内存释放

验收标准：
- 运行时内存 < 100MB
- 无明显内存泄漏
- 游戏结束后内存正确释放

5.2 响应性能测试

测试用例 TC303: 输入响应延迟测试
测试目标：验证输入响应及时
测试步骤：
1. 测试按键到角色移动的延迟
2. 测试菜单选择响应时间
3. 测试射击指令响应
4. 使用高速摄像验证延迟

验收标准：
- 输入延迟 < 16ms（1帧）
- UI响应 < 100ms
- 射击响应立即可见

======================================================================
6. 用户体验测试用例
======================================================================

6.1 易用性测试

测试用例 TC401: 新用户首次体验测试
测试对象：从未玩过游戏的用户
测试步骤：
1. 观察用户首次打开游戏的反应
2. 记录用户完成首局游戏的时间
3. 询问用户对控制方式的理解
4. 记录用户遇到的困惑点
5. 收集改进建议

验收标准：
- 95%用户能在5分钟内开始游戏
- 90%用户能理解基本操作
- 用户满意度 > 8/10

测试用例 TC402: 界面友好性测试
测试内容：
1. 文字大小和颜色对比度
2. 按键提示的清晰度
3. 游戏状态信息的可读性
4. 升级选择界面的直观性
5. 结算界面的完整性

验收标准：
- 所有文字清晰可读
- 操作提示准确明了
- 界面布局合理美观

6.2 游戏平衡性测试

测试用例 TC403: 武器平衡性测试
测试步骤：
1. 分别使用三种武器完成游戏
2. 记录胜率和游戏时长
3. 评估武器的趣味性差异
4. 收集玩家武器偏好
5. 分析数据平衡性

验收标准：
- 三种武器胜率差异 < 20%
- 每种武器都有独特优势
- 玩家选择相对均匀

测试用例 TC404: 难度曲线测试
测试步骤：
1. 记录不同时间段敌人强度
2. 分析玩家死亡时间分布
3. 评估升级获取频率
4. 测试Boss战难度合理性
5. 收集难度反馈

验收标准：
- 难度递增平滑自然
- 死亡时间分布合理
- Boss战有挑战性但可战胜

======================================================================
7. 兼容性测试用例
======================================================================

7.1 平台兼容性测试

测试用例 TC501: Windows 版本兼容性
测试平台：
- Windows 10 (版本 1909, 2004, 20H2, 21H1, 21H2)
- Windows 11 (版本 21H2, 22H2)

测试内容：
1. 游戏正常启动
2. 所有功能正常工作
3. 性能表现一致
4. 无系统特定问题

验收标准：所有测试平台功能完全正常

7.2 硬件兼容性测试

测试用例 TC502: 不同配置硬件测试
测试配置：
- 最低配置：Intel i3/AMD FX, 4GB RAM, 集成显卡
- 推荐配置：Intel i5/AMD Ryzen 5, 8GB RAM, 独立显卡
- 高端配置：Intel i7/AMD Ryzen 7, 16GB RAM, 高端显卡

测试内容：
1. 游戏启动时间
2. 运行流畅度
3. 发热和功耗
4. 稳定性表现

验收标准：最低配置能流畅运行

======================================================================
8. 压力测试用例
======================================================================

8.1 长时间运行测试

测试用例 TC601: 24小时稳定性测试
测试目标：验证长时间运行稳定性
测试步骤：
1. 自动化游戏循环脚本
2. 连续运行24小时
3. 监控内存使用变化
4. 记录任何崩溃或异常
5. 验证游戏逻辑一致性

验收标准：
- 24小时无崩溃
- 内存使用稳定
- 游戏逻辑保持正确

测试用例 TC602: 频繁操作压力测试
测试步骤：
1. 快速连续进入退出菜单
2. 快速重复选择武器
3. 高频率移动和射击
4. 快速连续升级选择
5. 观察系统响应和稳定性

验收标准：
- 无操作丢失或延迟
- 系统响应稳定
- 无内存或逻辑错误

======================================================================
9. 回归测试用例
======================================================================

9.1 核心功能回归测试

测试用例 TC801: 每版本回归测试套件
测试内容：
1. 所有单元测试通过
2. 核心游戏流程正常
3. 性能指标达标
4. 无新引入的Bug
5. 已修复Bug未重现

执行频率：每次代码变更后
自动化程度：80%单元测试自动化

9.2 用户体验回归测试

测试用例 TC802: UX回归测试
测试内容：
1. 界面布局无异常
2. 操作流程保持直观
3. 性能表现稳定
4. 视觉效果正常
5. 音效播放正确（预留）

执行频率：重要版本发布前
测试方式：手动测试

======================================================================
10. 质量标准
======================================================================

10.1 质量控制

必须通过的测试：
- 100% 单元测试通过
- 100% 核心功能测试通过
- 95% 系统测试通过
- 性能指标全部达标
- 无严重级别缺陷
- 一般级别缺陷 < 1个

建议通过的测试：
- 98% 集成测试通过
- 90% 兼容性测试通过
- 轻微级别缺陷 < 5个

10.2 缺陷严重程度定义

严重缺陷：
- 游戏崩溃或无法启动
- 核心功能完全无法使用
- 数据丢失或损坏
- 严重性能问题

一般缺陷：
- 功能异常但有替代方案
- 界面显示问题
- 轻微性能影响
- 边界条件处理不当

轻微缺陷：
- 文字错误或显示瑕疵
- 非关键功能小问题
- 体验改进建议
- 界面美化建议

